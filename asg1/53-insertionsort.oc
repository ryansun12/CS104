// $Id: 53-insertionsort.oc,v 1.22 2019-04-11 12:35:54-07 - - $
//
// Use insertion sort to print argv in sorted order.
//

#include "oclib.h"

int strcmp (string s1, string s2) {
   int index = 0;
   int contin = TRUE;
   int s1c = 0;
   int s2c = 0;
   int cmp = 0;
   while (contin) {
      s1c = s1[index];
      s2c = s2[index];
      cmp = s1c - s2c;
      if (cmp != 0) return cmp;
      if (s1c == '\0') contin = FALSE;
      index = index + 1;
   }
   return 0;
}

void insertion_sort (int size, string[] array) {
   int sorted = 1;
   int slot = 0;
   string element = nullptr;
   int contin = FALSE;
   while (sorted < size) {
      slot = sorted;
      element = array[slot];
      contin = TRUE;
      while (contin) {
         if (slot == 0) {
            contin = FALSE;
         }else if (strcmp (array[slot - 1], element) <= 0) {
            contin = FALSE;
         }else {
            array[slot] = array[slot - 1];
            slot = slot - 1;
         }
      }
      array[slot] = element;
      sorted = sorted + 1;
   }
}

void print_array (string label, int size, string[] array) {
   int index = 0;
   putchr ('\n');
   putstr (label);
   putstr (":\n");
   while (index < size) {
      putstr (array[index]);
      putchr ('\n');
      index = index + 1;
   }
}

int main (int argc, string[] argv) {
   print_array ("unsorted", argc, argv);
   insertion_sort (argc, argv);
   print_array ("sorted", argc, argv);
   return 0;
}


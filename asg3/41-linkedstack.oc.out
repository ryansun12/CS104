; 0.  1: # 1 "41-linkedstack.oc"; 1.  0: 
; 1.  1: # 1 "<built-in>"
; 2.  1: # 1 "<command-line>"
; 3.  1: # 1 "/usr/include/stdc-predef.h" 1 3 4
; 4.  1: # 1 "<command-line>" 2
; 5.  1: # 1 "41-linkedstack.oc"
; 6.  1: 
; 6.  2: 
; 6.  3: # 1 "oclib.h" 1
; 7.  1: # 22 "oclib.h"
; 8. 22: void fail (string expr, string file, int line);
; 8. 23: 
; 8. 24: void putchr (int chr);
; 8. 25: void putint (int num);
; 8. 26: void putstr (string str);
; 8. 27: 
; 8. 28: int getchr();
; 8. 29: string getstr();
; 8. 30: string getln();
; 8. 31: # 4 "41-linkedstack.oc" 2
; 9.  4: 
; 9.  5: struct node {
; 9.  6:    string data;
; 9.  7:    ptr <struct node> link;
; 9.  8: };
; 9.  9: 
; 9. 10: struct stack {
; 9. 11:    ptr <struct node> top;
; 9. 12: };
; 9. 13: 
; 9. 14: int empty (ptr<struct stack> stack) {
; 9. 15:    {if (not (stack != nullptr)) fail ("stack != nullptr", "41-linkedstack.oc", 15);};
; 9. 16:    return stack->top == nullptr;
; 9. 17: }
; 9. 18: 
; 9. 19: ptr<struct stack> new_stack() {
; 9. 20:    ptr<struct stack> stack = alloc<struct stack>();
; 9. 21:    stack->top = nullptr;
; 9. 22:    return stack;
; 9. 23: }
; 9. 24: 
; 9. 25: void push (ptr<struct stack> stack, string str) {
; 9. 26:    ptr <struct node> tmp = alloc<struct node>();
; 9. 27:    {if (not (stack != nullptr)) fail ("stack != nullptr", "41-linkedstack.oc", 27);};
; 9. 28:    tmp->data = str;
; 9. 29:    tmp->link = stack->top;
; 9. 30:    stack->top = tmp;
; 9. 31: }
; 9. 32: 
; 9. 33: string pop (ptr<struct stack> stack) {
; 9. 34:    string tmp = stack->top->data;
; 9. 35:    {if (not (stack != nullptr)) fail ("stack != nullptr", "41-linkedstack.oc", 35);};
; 9. 36:    {if (not (not empty (stack))) fail ("not empty (stack)", "41-linkedstack.oc", 36);};
; 9. 37:    stack->top = stack->top->link;
; 9. 38:    return tmp;
; 9. 39: }
; 9. 40: 
; 9. 41: int main (int argc, array<string> argv) {
; 9. 42:    int argi = 0;
; 9. 43:    ptr<struct stack> stack = new_stack();
; 9. 44:    while (argi < argc) {
; 9. 45:       push (stack, argv[argi]);
; 9. 46:       argi = argi + 1;
; 9. 47:    }
; 9. 48:    while (not empty (stack)) {
; 9. 49:       putstr (pop (stack));
; 9. 50:       putchr ('\n');
; 9. 51:    }
; 9. 52:    return 0;
; 9. 53: }
